/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as _notFoundRouteImport } from './routes/__not-found'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FamilyIndexRouteImport } from './routes/family.index'
import { Route as FamilyCreateRouteImport } from './routes/family.create'
import { Route as FamilyFamilyMemberIdEditRouteImport } from './routes/family.$familyMemberId.edit'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const _notFoundRoute = _notFoundRouteImport.update({
  id: '/__not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FamilyIndexRoute = FamilyIndexRouteImport.update({
  id: '/family/',
  path: '/family/',
  getParentRoute: () => rootRouteImport,
} as any)
const FamilyCreateRoute = FamilyCreateRouteImport.update({
  id: '/family/create',
  path: '/family/create',
  getParentRoute: () => rootRouteImport,
} as any)
const FamilyFamilyMemberIdEditRoute =
  FamilyFamilyMemberIdEditRouteImport.update({
    id: '/family/$familyMemberId/edit',
    path: '/family/$familyMemberId/edit',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/family/create': typeof FamilyCreateRoute
  '/family': typeof FamilyIndexRoute
  '/family/$familyMemberId/edit': typeof FamilyFamilyMemberIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/family/create': typeof FamilyCreateRoute
  '/family': typeof FamilyIndexRoute
  '/family/$familyMemberId/edit': typeof FamilyFamilyMemberIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__not-found': typeof _notFoundRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/family/create': typeof FamilyCreateRoute
  '/family/': typeof FamilyIndexRoute
  '/family/$familyMemberId/edit': typeof FamilyFamilyMemberIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/family/create'
    | '/family'
    | '/family/$familyMemberId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/family/create'
    | '/family'
    | '/family/$familyMemberId/edit'
  id:
    | '__root__'
    | '/'
    | '/__not-found'
    | '/login'
    | '/register'
    | '/family/create'
    | '/family/'
    | '/family/$familyMemberId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _notFoundRoute: typeof _notFoundRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  FamilyCreateRoute: typeof FamilyCreateRoute
  FamilyIndexRoute: typeof FamilyIndexRoute
  FamilyFamilyMemberIdEditRoute: typeof FamilyFamilyMemberIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__not-found': {
      id: '/__not-found'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _notFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/family/': {
      id: '/family/'
      path: '/family'
      fullPath: '/family'
      preLoaderRoute: typeof FamilyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/family/create': {
      id: '/family/create'
      path: '/family/create'
      fullPath: '/family/create'
      preLoaderRoute: typeof FamilyCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/family/$familyMemberId/edit': {
      id: '/family/$familyMemberId/edit'
      path: '/family/$familyMemberId/edit'
      fullPath: '/family/$familyMemberId/edit'
      preLoaderRoute: typeof FamilyFamilyMemberIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _notFoundRoute: _notFoundRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  FamilyCreateRoute: FamilyCreateRoute,
  FamilyIndexRoute: FamilyIndexRoute,
  FamilyFamilyMemberIdEditRoute: FamilyFamilyMemberIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
