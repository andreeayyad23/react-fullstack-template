# Logs
# ---
# These files contain debug information, timestamps, and other data
# that are generated during application execution and should not be
# committed to version control.
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*
*.log.json
.DS_Store # macOS generated files - often found in logs dirs too

# Environment Variables & Sensitive Data
# ---
# Crucial: These files contain sensitive information (API keys, database
# credentials, etc.) and MUST NOT be committed to the repository.
# They are typically loaded at runtime based on the environment.
.env             # Generic environment file
.env.local       # Local overrides
.env.development # Development-specific
.env.test        # Test-specific
.env.production  # Production-specific
.env.*.local     # Local overrides for specific environments (e.g., .env.development.local)
.env.*           # Catch all files starting with .env (e.g., .env.staging)

# Dependency Directories
# ---
# This is where package managers store all installed third-party libraries.
# These should always be ignored as they can be reconstructed via `npm install`,
# `yarn install`, or `pnpm install` based on package-lock.json/yarn.lock/pnpm-lock.yaml.
node_modules/

# Build & Distribution Artifacts
# ---
# These are generated files and folders resulting from the build process (e.g.,
# compiled JavaScript, CSS, images, etc.) which should not be version controlled.
# They can always be regenerated from the source code.
dist/
build/
out/
es/
lib/
public/build/
.next/ # Next.js build output
.svelte-kit/ # SvelteKit build output
.vite/ # Vite build cache
dist-ssr/ # Specific for SSR builds, included from your original
storybook-static/ # Storybook build output

# Editor & IDE Specific Files/Directories
# ---
# Files and folders generated by various editors and IDEs (like VS Code, IntelliJ,
# Sublime Text, etc.) that store workspace settings, temporary files, and user-specific
# preferences. These are personal and should not be shared across team members.
.vscode/*
!.vscode/extensions.json # EXCEPT this file, which can suggest extensions to team
.idea/                   # IntelliJ IDEA projects
.history/                # VS Code Local History or similar
*.suo                    # Visual Studio Solution User Options
*.ntvs*                  # Node.js Tools for Visual Studio
*.njsproj                # Node.js Project for Visual Studio
*.sln                    # Visual Studio Solution files (if generated in root)
*.sw?                    # Vim swap files
.DS_Store                # macOS generated folder metadata
Thumbs.db                # Windows generated thumbnail cache
~*                       # Backup files generated by some editors (e.g., emacs)

# TypeScript Specific
# ---
# Files generated by TypeScript compilation.
*.tsbuildinfo # TypeScript build info file for incremental compilation
*.js.map      # Source maps (often go with compiled JS)
*.d.ts.map    # Source maps for declaration files

# Testing & QA Tools
# ---
# Output or cache directories from testing frameworks, code coverage tools, etc.
coverage/
/test-results/   # Playwright
/playwright-report/ # Playwright
/blob-report/    # Playwright
/playwright/.cache/ # Playwright

# Node.js Specific Files
# ---
# Common files generated by Node.js package managers or runtime.
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*
package-lock.json # If you're using yarn.lock or pnpm-lock.yaml, you might ignore this.
                  # If using npm, KEEP THIS. Best practice is to ignore only if another
                  # lock file is explicitly preferred for the project.
                  # Example: if you only use yarn, then:
                  # package-lock.json
yarn.lock         # Keep if using Yarn, ignore if using npm or pnpm.
pnpm-lock.yaml    # Keep if using pnpm, ignore if using npm or yarn.
.pnpm-store/     # pnpm store for global caching
npm-shrinkwrap.json
npm-cache/
.eslintcache     # ESLint cache file
.jest/           # Jest cache
.prettierignore  # You might want to include this, or remove if you track it.
.prettierrc.js   # Or any .prettierrc config file, usually tracked.
.parcel-cache/   # Parcel bundler cache

# Docker & Containerization
# ---
# Files related to Docker or container setups.
.dockerignore    # Usually tracked, but some might ignore.
docker-compose.override.yml # Local Docker overrides often ignored.

# Operating System Specific
# ---
.DS_Store        # macOS
ehthumbs.db      # Windows
Desktop.ini      # Windows